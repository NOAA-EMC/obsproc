#!/bin/bash
##############################################
#PBS -N %JTYP%_%DESC%_%CC%
#PBS -o /lfs/h2/emc/stmp/Nicholas.Esposito/%JTYP%_%PDY%_%CC%_%DESC%.o
#PBS -e /lfs/h2/emc/stmp/Nicholas.Esposito/%JTYP%_%PDY%_%CC%_%DESC%.o
#PBS -q dev
#PBS -l walltime=00:30:00
#PBS -A OBSPROC-DEV
#PBS -l place=vscatter,select=1:ncpus=7:mem=12GB

##############################################
## Submit notes:
## For specific PDY:
## > jtyp=dump_monitor cyc=00 PDY=20170126 desc=somethingfun cycqsub jdump_monitor.wc2.pbs
## For latest/current PDY:
## > jtyp=dump_monitor cyc=00 desc=somethingfun cycqsub jdump_monitor.wc2.pbs
## cycqsub location: /u/Nicholas.Esposito/bin/cycqsub
###############################################

NCPU=`wc -l < $PBS_NODEFILE` 
echo ------------------------------------------------------
echo ' This job is allocated on '${NCPU}' cpu(s)'
echo 'Job is running on node(s): '
cat $PBS_NODEFILE
echo ------------------------------------------------------
echo PBS: qsub is running on $PBS_O_HOST
echo PBS: originating queue is $PBS_O_QUEUE
echo PBS: executing queue is $PBS_QUEUE
echo PBS: working directory is $PBS_O_WORKDIR
echo PBS: execution mode is $PBS_ENVIRONMENT
echo PBS: job identifier is $PBS_JOBID
echo PBS: job name is $PBS_JOBNAME
echo PBS: node file is $PBS_NODEFILE
echo PBS: current home directory is $PBS_O_HOME
echo PBS: PATH = $PBS_O_PATH
echo ------------------------------------------------------

cat /etc/motd
set -xa

userROOT=/lfs/h2/emc/obsproc/noscrub/$USER

export obsproc_ver=1.0.0
VERSION_FILE=${userROOT}/EMC_obsproc/$obsproc_ver/EMC_obsproc_jdumpmonitor/versions/run.ver
[ -f $VERSION_FILE ]  &&  . $VERSION_FILE

module load prod_util/${prod_util_ver}
module load prod_envir/${prod_envir_ver}

module load grib_util/${grib_util_ver}
module load util_shared/${util_shared_ver}
module load w3nco/${w3nco_ver}
module load w3emc/${w3emc_ver}
module load bacio/${bacio_ver}
module load bufr_dump/${bufr_dump_ver}
module load bufr/${bufr_ver}

module load envvar/${envvar_ver}
module load PrgEnv-intel/${PrgEnv_intel_ver}
module load intel/${intel_ver}
module load craype/${craype_ver}
module load cray-mpich/${cray_mpich_ver}
module load cray-pals/${cray_pals_ver}
module load hdf5/${hdf5_ver}
module load netcdf/${netcdf_ver}
module load cfp/${cfp_ver}


if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)prod_util/") -eq 0 ]]; then echo "prod_util is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)prod_envir/") -eq 0 ]]; then echo "prod_envir is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)util_shared/") -eq 0 ]]; then echo "util_shared is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)grib_util/") -eq 0 ]]; then echo "grib_util is not loaded!"; fi

if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)hdf5/") -eq 0 ]]; then echo "hdf5 is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)netcdf/") -eq 0 ]]; then echo "netcdf is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)w3nco/") -eq 0 ]]; then echo "w3nco is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)w3emc/") -eq 0 ]]; then echo "w3emc is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)bacio/") -eq 0 ]]; then echo "bacio is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)bufr_dump/") -eq 0 ]]; then echo "bufr_dump is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)bufr/") -eq 0 ]]; then echo "bufr is not loaded!"; fi

if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)envvar/") -eq 0 ]]; then echo "envvar is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)PrgEnv-intel/") -eq 0 ]]; then echo "PrgEnv-intel is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)intel/") -eq 0 ]]; then echo "intel is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)craype/") -eq 0 ]]; then echo "craype is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)cray-mpich/") -eq 0 ]]; then echo "cray-mpich is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)cray-pals/") -eq 0 ]]; then echo "cray-pals is not loaded!"; fi
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)cfp/") -eq 0 ]]; then echo "cfp is not loaded!"; fi


module unload bufr_dump
#module use /lfs/h2/emc/obsproc/noscrub/Nicholas.Esposito/bufr_dump_cmake 
export bufr_dump_ver=1.0.0
module use /lfs/h2/emc/obsproc/noscrub/Nicholas.Esposito/bufr_dump_cmake/$obsproc_ver/jdumpmonitor/modulefiles
module load bufr_dump/$bufr_dump_ver 

# --> these are normally not changed and should always be exported here first

export DATAROOT=/lfs/h2/emc/ptmp/${USER}

envir=prod # scripts point to production files as default

export DEBUG_LEVEL=3

export KEEPDATA=YES

export SENDECF=NO
export SENDDBN=NO

export COPY=NO  # This should usually be set to NO in checkout because we do
                # not have permission to write to $OBCNTarch if it is pointing
                # to production location (which we usually want so we can get
                # the full 30-days of status files for data count averaging)
                # (today's and yesterday's status files will not be written to
                # $OBCNTarch when COPY=NO)
export HOMEarch=/lfs/h2/emc/stmp/${USER}/com # The unilateral move of RTDM files for all

export TIME_CHECK=NO


export cyc=%CC%
DESC=%DESC%
JTYP=%JTYP%
export job=${JTYP}_${cyc}
export PDY=%PDY%

export COMIN_ROOT=/lfs/h1/ops/canned/dcom
export COMOUT=$DATAROOT/com/obsproc/${obsproc_ver}/dump.${PDY}


export HOMEarch=/lfs/h1/ops/canned/com/dump/v2.5/sdm_rtdm 
export AVGDarch_IN=$HOMEarch/avgdata
export AVGDarch_OUT=/lfs/h2/emc/stmp/$USER/com/dump/prod/sdm_rtdm/avgdata 

export PDYm1=20210823
#export comin_m1=${COMIN_ROOT}/${PDYm1} # used by bufr_avgdata.sh
####mkdir -p $comin_m1

# !!! git branch EMC_obsproc: wcoss2
export HOMEobsproc=${userROOT}/obsproc-cmake/$obsproc_ver/jdumpmonitor/
export HOMEbufr_dump=${userROOT}/bufr_dump_cmake/$bufr_dump_ver/jdumpmonitor

export DCOMROOT=/lfs/h1/ops/canned/dcom
export TANK=/lfs/h1/ops/canned/dcom

export comin=/lfs/h1/ops/canned/com/dump/v2.5/dump.${PDY}
export comin_m1=/lfs/h1/ops/canned/com/dump/v2.5/dump.${PDYm1}

# Execute the Environmental Equivalence form of the job-script
# ------------------------------------------------------------
$HOMEobsproc/jobs/JDUMP_MONITOR

exit

