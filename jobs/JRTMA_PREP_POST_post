#!/bin/bash
set -xa
date -u

###################################################################
# Set DEBUG LEVEL - modifies info in execution trace prompt string
###################################################################
export DEBUG_LEVEL=${DEBUG_LEVEL=1}
case $DEBUG_LEVEL in
  1) export PS4='+ ${SECONDS}s + ' ;;       # add seconds (this is typical case)
  0) export PS4='+ ';;                      # don't include seconds (useful if
                                            #  want to diff output from 2 runs)
  2) export PS4='+ ${SECONDS}s:L$LINENO + ';;         # add script line #
  3) export PS4='+ ${SECONDS}s:${0##*/}:L$LINENO + ';;# add script name & line #
  4) export PS4='+ ${0##*/}:L$LINENO + ';;  # script name & line (no seconds)
  *) echo "Unrecognized DEBUG_LEVEL.  Stay with current PS4 setting";;
esac

########################################
# Check that required variables are set
########################################
set +x
echo
echo cyc is ${cyc:?"###FATAL ERROR \"cyc\" is not set"}
echo envir is ${envir:?"###FATAL ERROR \"envir\" is not set"}
echo job is ${job:?"###FATAL ERROR \"job\" is not set"}
echo DATAROOT is ${DATAROOT:?"###FATAL ERROR \"DATAROOT\" is not set"}
echo
set -x

###############################
# Print out version information
###############################
set +x
echo
echo "####################################################################"
echo
echo "OBSPROC version is ${obsproc_ver:-not set}"
echo
echo "####################################################################"
echo
set -x

#####################################################################
# List modules loaded for this job
#   May need to initialize the Modules package to find the module
#   command.  Will do so for either system.
#####################################################################
if [ -f /usrx/local/Modules/default/init/sh ]; then  # on tide/gyre
  . /usrx/local/Modules/default/init/sh 2>/dev/null
elif [ -f /usrx/local/prod/modules/default/init/sh ]; then # on venus/mars
  . /usrx/local/prod/modules/default/init/sh 2>/dev/null
fi
set +x
echo
echo "####################################################################"
echo
      module list
echo
echo "####################################################################"
echo
set -x

###########################
# Specify NET and RUN Name
###########################
export NET=${NET:-rtma}

echo $job | grep "_ru_"
err_ru=$?
if [ $err_ru = 0 ]; then
  export RUN=${RUN:-rtma_ru}  # rapid update w/ sub-hourly cycles
  set +x
  echo
  echo cycM is ${cycM:?"###FATAL ERROR \"cycM\" is not set"}
  echo
  set -x
else
  export RUN=${RUN:-rtma}     # normal, hourly cycle run
fi
set +x
echo
echo NET is ${NET}
echo RUN is ${RUN}
echo
set -x


##############################
# Specify cycle and time-mark
##############################
export cycle=t${cyc}z
export tmmark=tm00

###############################
# Create new working directory
###############################
jobid=${jobid:-${job}.$(hostname -s).$$}
export DATA=${DATA:-$DATAROOT/${jobid}}
rm -rf $DATA
mkdir -p $DATA
cd $DATA
export pgmout=OUTPUT.$$

######################################
# Set job log file for postmsg output
######################################
jlogfile=${jlogfile:-${DATA}/jlogfile}

#################################################
# SENDCOM      - Copy files to $COMOUT directory
# SENDECF      - Flag Events on ECFLOW
# SENDDBN      - Alert output file to TOC
#################################################
export SENDCOM=${SENDCOM:-YES}
export SENDECF=${SENDECF:-YES}
export SENDDBN=${SENDDBN:-YES}

##########################
# Specify Execution Areas
##########################

# -------------------------------
# Paths for obsproc items
# -------------------------------
export HOMEobsproc=${HOMEobsproc:\
-${NWROOT:?}/obsproc.${obsproc_ver:?\
"###FATAL ERROR \"obsproc_ver\" is not set"}}

export SCRIPTSobsproc=${SCRIPTSobsproc:\
-$HOMEobsproc/scripts}

export EXECobsproc=${EXECobsproc:-$HOMEobsproc/exec}

export USHobsproc=${USHobsproc:-$HOMEobsproc/ush}

#########################################################################
# Add some prod utilities to working directory
#########################################################################
echo "step ############# break ##############################" > ./break
cp $UTILROOT/ush/err_chk   .; chmod +x err_chk
cp $UTILROOT/ush/err_exit  .; chmod +x err_exit
cp $UTILROOT/ush/prep_step .; chmod +x prep_step
cp $UTILROOT/ush/postmsg   .; chmod +x postmsg
cp $UTILROOT/ush/setpdy.sh .; chmod +x setpdy.sh

##########################################
# Run setpdy and initialize PDY variables
##########################################
set +x; echo -e "\n---> path to setpdy.sh below is: `which setpdy.sh`"; set -x
setpdy.sh
. $DATA/PDY

# Imported variable cycM, if it exists, contains cycle time minutes
#  If cycM is imported, reset exported cycle to 4-digit value t<HHMM>z
#  (Note: This value for $cycle will now be used in this script and in
#         downstream script exprep_post.sh.ecf)

[ -n "$cycM" ]  &&  cycle=t${cyc}${cycM}z

#########################
# Define COM directories
#########################
export COMIN_ROOT=${COMIN_ROOT:-${COMROOT:-""}}

if [[ "$RUN_ENVIR" == nco ]]; then
  export COMIN=${COMIN_ROOT:?}/obsproc/${RUN}.${PDY}
  export COMOUT=${COMROOT:?}/obsproc/${RUN}.${PDY}
  mkdir -m 775 -p $COMOUT
else
  export COMIN=${COMIN:-${COMIN_ROOT:?}/obsproc/${RUN}.${PDY}}

# COMOUT_ROOT for developers defaults to unique $DATA/com directory as root to
#  prevent job from writing into a non-unique directory that might already have 
#  output in it from a previous checkout run for the same cycle 
# -----------------------------------------------------------------------------
  export COMOUT_ROOT=${COMOUT_ROOT:-${DATA}/com}
  export COMOUT=${COMOUT:-${COMOUT_ROOT}/obsproc/${RUN}.${PDY}}
  mkdir -m 755 -p $COMOUT
fi

#########################################################
# SETUP RTMA POST-ANALYSIS PREPBUFR PROCESSING VARIABLES
#########################################################

#########################################################
# Specify variables specific to this execution of script
#########################################################
export PROCESS_REMOREST=${PROCESS_REMOREST:-YES}
export PROCESS_TIMETWINS=NO  # can never run here
export PROCESS_ALL_REPORT_COUNTS=NO  # can never run here

env

#####################
# Execute the script
#####################
$SCRIPTSobsproc/exprep_post.sh.ecf
eval err_${RUN}_prep_post=$?
eval [[ \$err_${RUN}_prep_post -ne 0 ]] && $DATA/err_exit

echo "$SITE `hostname`  --  `date -u`" > $COMOUT/where_${cycle}_${RUN}_prep_post_ran

> $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_post_run
[ -n "$obsproc_ver" ]  &&  \
 echo "OBSPROC version is $obsproc_ver" >> \
 $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_post_run

if [ "$KEEPDATA" != YES ]; then
   cd $DATAROOT
   rm -rf $DATA
fi
date -u

exit
