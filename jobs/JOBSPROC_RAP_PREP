#!/bin/bash
set -xa
date -u

###################################################################
# Set DEBUG LEVEL - modifies info in execution trace prompt string
###################################################################
export DEBUG_LEVEL=${DEBUG_LEVEL=1}
case $DEBUG_LEVEL in
  1) export PS4='+ ${SECONDS}s + ' ;;       # add seconds (this is typical case)
  0) export PS4='+ ';;                      # don't include seconds (useful if
                                            #  want to diff output from 2 runs)
  2) export PS4='+ ${SECONDS}s:L$LINENO + ';;         # add script line #
  3) export PS4='+ ${SECONDS}s:${0##*/}:L$LINENO + ';;# add script name & line #
  4) export PS4='+ ${0##*/}:L$LINENO + ';;  # script name & line (no seconds)
  *) echo "Unrecognized DEBUG_LEVEL.  Stay with current PS4 setting";;
esac

########################################
# Check that required variables are set
########################################
set +x
echo
echo cyc is ${cyc:?"###FATAL ERROR \"cyc\" is not set"}
echo envir is ${envir:?"###FATAL ERROR \"envir\" is not set"}
echo job is ${job:?"###FATAL ERROR \"job\" is not set"}
echo DATAROOT is ${DATAROOT:?"###FATAL ERROR \"DATAROOT\" is not set"}
echo
set -x

###############################
# Print out version information
###############################
set +x
echo
echo "####################################################################"
echo
echo "OBSPROC version is ${obsproc_ver:-not set}"
echo
echo "####################################################################"
echo
set -x

#####################################################################
# List modules loaded for this job
#   On luna/surge may need to initialize the Modules package to find
#   the module command.  Will do so for either system.
#####################################################################
set +x
echo
echo "####################################################################"
echo
      module list
echo
echo "####################################################################"
echo
set -x

###########################
# Specify NET and RUN Name
###########################
export obsNET=${obsNET:-obsproc}
export NET=${NET:-rap}
echo $job | grep pcyc
err_p=$?
echo $job | grep erly
err_e=$?
if [ $err_p = 0 ]; then
  export RUN=${RUN:-rap_p}  # Partial cycle
elif [ $err_e = 0 ]; then
  export RUN=${RUN:-rap_e}  # Early cycle
else
  export RUN=${RUN:-rap}    # Full cycle
fi

set +x
echo
echo obsNET is ${obsNET:?"###FATAL ERROR \"obsNET\" is not set"}
echo NET is ${NET:?"###FATAL ERROR \"NET\" is not set"}
echo RUN is ${RUN:?"###FATAL ERROR \"RUN\" is not set"}
echo
set -x


##############################
# Specify cycle and time-mark
##############################
export cycle=t${cyc}z
export tmmark=tm00

###############################
# Create new working directory
###############################
jobid=${jobid:=${job}.$(hostname -s).$$}
export DATA=${DATA:-$DATAROOT/${jobid}}
rm -rf $DATA
mkdir -p $DATA
cd $DATA
export pgmout=OUTPUT.$$

######################################
# Set job log file for postmsg output
######################################
jlogfile=${jlogfile:-${DATA}/jlogfile}

#################################################
# SENDCOM      - Copy files to $COMOUT directory
# SENDECF      - Flag Events on ECFLOW
# SENDDBN      - Alert output file to TOC
#################################################
export SENDCOM=${SENDCOM:-YES}
export SENDECF=${SENDECF:-YES}
export SENDDBN=${SENDDBN:-YES}

##########################
# Specify Execution Areas
##########################

# -------------------------------
# Paths for obsproc items
# -------------------------------
export HOMEobsproc=${HOMEobsproc:\
-${PACKAGEROOT:?}/${obsNET}/${obsproc_ver:?\
"###FATAL ERROR \"obsproc_ver\" is not set"}}

export SCRIPTSobsproc=${SCRIPTSobsproc:-$HOMEobsproc/scripts}
export USHobsproc=${USHobsproc:-$HOMEobsproc/ush}

# directory path to data prep script executed in model script
# -----------------------------------------------------------
export ushscript_prep=${ushscript_prep:-$USHobsproc}

# directory paths to overall PREP processing executed in
#  prepobs_makeprepbufr.sh and its various child scripts
# -------------------------------------------------------
export EXECPREP=${EXECPREP:-${HOMEobsproc}/exec}
export FIXPREP=${FIXPREP:-${HOMEobsproc}/fix}
export PARMPREP=${PARMPREP:-${HOMEobsproc}/parm}

# ---------------------------
# Paths for non-obsproc items
# ---------------------------

# DICTPREP is directory path to metar.tbl dictionary used in
#  prepobs_prepacqc.sh if PREPOBS_PREPACPF is executed
# ----------------------------------------------------------
export DICTPREP=${DICTPREP:-${OPSROOT}/decoders/decod_shared/dictionaries_${dictionaries_ver}}

# export specific rap OBSPROC variables here
# ------------------------------------------
export PRPC=${PRPC:-$PARMPREP/prepobs_prepdata.rap.parm}
export CQCC=${CQCC:-$PARMPREP/prepobs_cqcbufr.rap.parm}
export AQCC=${AQCC:-$PARMPREP/prepobs_prepacqc.rap.parm}
export PQCC=${PQCC:-$PARMPREP/prepobs_profcqc.rap.parm}

#########################################################################
# Add some prod utilities to working directory
#########################################################################
echo "step ############# break ##############################" > ./break
cp $UTILROOT/ush/err_chk   .; chmod +x err_chk
cp $UTILROOT/ush/err_exit  .; chmod +x err_exit
cp $UTILROOT/ush/prep_step .; chmod +x prep_step
cp $UTILROOT/ush/postmsg   .; chmod +x postmsg
cp $UTILROOT/ush/setpdy.sh .; chmod +x setpdy.sh

##########################################
# Run setpdy and initialize PDY variables
##########################################
./setpdy.sh
. PDY

#########################
# Define COM directories
#########################
export COMIN_ROOT=${COMIN_ROOT:-${COMROOT:-""}}
export COMPONENT=${COMPONENT:-atmos}

if [[ "$RUN_ENVIR" == nco ]]; then
  export COMIN=${COMIN:-$(compath.py ${envir}/${obsNET}/${obsproc_ver}/${RUN}.${PDY})}
  export COMOUT=${COMOUT:-$(compath.py ${envir}/${obsNET}/${obsproc_ver}/${RUN}.${PDY})}
  mkdir -m 775 -p $COMOUT
else
  export COMIN=${COMIN:-${COMIN_ROOT:?}/${obsNET}/${obsproc_ver}/${RUN}.${PDY}}

# COMOUT_ROOT for developers defaults to unique $DATA/com directory as root to
#  prevent job from writing into a non-unique directory that might already have
#  output in it from a previous checkout run for the same cycle
# -----------------------------------------------------------------------------
  export COMOUT_ROOT=${COMOUT_ROOT:-${DATA}/com}
  export COMOUT=${COMOUT:-${COMOUT_ROOT}/${obsNET}/${obsproc_ver}/${RUN}.${PDY}}
  mkdir -m 755 -p $COMOUT
fi

export NEMSIO_IN=${NEMSIO_IN:-.false.}      # switch for nemsio vs sigio guess
export NETCDF_IN=${NETCDF_IN:-.true.}       # switch for netcdf history guess
                                            # NOTE: only NESMIO_IN or NETCDF_IN can be .true.
export envir_getges=${envir_getges:-prod}
export GETGES_NWG=${GETGES_NWG:-$GESROOT} ## this needs work for wc2
export COMINgdas=${COMINgdas:-$(compath.py gfs/${envir_getges}/gdas.$PDY)/${cyc}/${COMPONENT}}
export COMINgfs=${COMINgfs:-$(compath.py gfs/${envir_getges}/gfs.$PDY)/${cyc}/${COMPONENT}}

################################################################################
# SETUP RAP (full cycle), RAP_P (partial cycle) or RAP_E (early cycle) PREPBUFR
# PROCESSING VARIABLES
################################################################################

#########################################################
# Specify variables specific to this execution of script
#########################################################

#  Set POE *or* BACK to YES in order to run this job in a parallel environment

export POE=${POE:-NO}
##export BACK=YES  # set BACK to YES for an alternate method of running this
                   #  job in a parallel environment (in this case POE must be
                   #  NO)

#  NSPLIT indicates the number of parts into which the PREPDATA
#         processing will will be split in order to run in parallel
#         for computational efficiency (either under poe tasks when
#         POE=YES or in background threads when BACK=YES)
#   (Applies only when either POE=YES or BACK=YES, and PREPDATA=YES)
#   Consider the size of the backgrounds fields if using threads.

export NSPLIT=${NSPLIT:-1}

#  BUFRLIST indicates the list of BUFR data dump file names to process

export BUFRLIST=${BUFRLIST:-"adpupa proflr aircar aircft satwnd adpsfc \
 sfcshp vadwnd goesnd msonet gpsipw rassda ascatw wdsatr"}

export errPREPDATA_limit=4 # allow program PREPOBS_PREPDATA to continue at all
                           # center hour (cycle) times if foreground exit
                           # status is 4 (i.e., when either either "ADPUPA" or
                           # "ADPSFC" dump is empty)

# VARIABLES THAT CONTROL PROCESSING OF INDIVIDUAL PROGRAMS
# --------------------------------------------------------

#  -- These can individually be switched to NO without affecting the
#      success of other programs and the success of the complete job
#      (all should normally be set to YES unless otherwise specified;
#       if job fails in one of these programs, set offending program
#       to NO and resubmit to "work-around" problem)

export SYNDATA=NO                # NEVER execute program SYNDAT_SYNDATA

export PREPACQC=${PREPACQC:-YES} # Execute PREPACQC script processing if YES
   export PROCESS_ACQC=${PROCESS_ACQC:-YES} # Execute program PREPOBS_PREPACQC
                                            #  if YES
   export PROCESS_ACPF=${PROCESS_ACPF:-YES} # Execute program PREPOBS_PREPACPF
                                            #  if YES

export PROFCQC=${PROFCQC:-YES}   # Execute program PREPOBS_PROFCQC  if YES

export CQCVAD=${CQCVAD:-YES}     # Execute program PREPOBS_CQCVAD   if YES

export CQCBUFR=${CQCBUFR:-YES}   # Execute program PREPOBS_CQCBUFR  if YES

export OIQCBUFR=NO               # NEVER execute program PREPOBS_OIQCBUFR


#  -- If any of these are switched to NO it will affect the success of
#      other programs and the success of the complete job
#      (these are set-up only for CHECKOUT runs - they should always
#       be set to YES for operational runs)

export PREPDATA=${PREPDATA:-YES}  
                      # Execute programs PREPOBS_MPCOPYBUFR, PREPOBS_PREPDATA,
                      # PREPOBS_LISTHEADERS and PREPOBS_MONOPREPBUFR if YES

export GETGUESS=${GETGUESS:-YES}
                      # Encode first guess (background) values interpolated to
                      # observation locations in the PREPBUFR file for use by
                      # the q.c. programs.  If the center PREPBUFR processing
                      # date/time is a multiple of 3-hrs, this guess is always
                      # from a global sigma guess file valid at the center
                      # PREPBUFR processing date/time.  Otherwise, this guess
                      # is created by a linear interpolation of spectral
                      # coefficients from global sigma guess files that span
                      # the PREPBUFR processing date/time.  This is necessary
                      # because global sigma guess files are valid only at
                      # hours which are a multiple of 3.

export DO_QC=${DO_QC:-YES}
                      # IF NO, programs PREPOBS_PREPACQC, PREPOBS_PREPACPF,
                      # PREPOBS_PROFCQC, PREPOBS_CQCVAD, PREPOBS_CQCBUFR and
                      # PREPOBS_OIQCBUFR will NEVER execute regardless of
                      # switches above -
                      # should be set to NO only as a last resort!!!

env

#####################
# Execute the script
#####################
$SCRIPTSobsproc/exrap_makeprepbufr.sh
err_rap_makeprepbufr=$?
eval err_${RUN}_prep=${err_rap_makeprepbufr}
[[ $err_rap_makeprepbufr -ne 0 ]] && $DATA/err_exit

echo "$SITE `hostname`  --  `date -u`" > $COMOUT/where_${cycle}_${RUN}_prep_ran

> $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_run
[ -n "$obsproc_ver" ]  &&  \
 echo "OBSPROC version is $obsproc_ver" >> \
 $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_run

if [ "$KEEPDATA" != YES ]; then
   cd $DATAROOT
   rm -rf $DATA
fi
date -u

exit
